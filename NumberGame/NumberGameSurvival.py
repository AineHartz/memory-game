"""
================
SURVIVAL MODE
================
"""

import random
import time


level_num = 0 #keep track of generate_numbers calls (aka levels)
score = -1 #keeps track of points the player has after the game

gen_nums_speed = 1 #default speed
gen_nums_length = 3 #default sequence length

def generate_numbers(length, speed):
    """
    Generates a list of random numbers in the range 0-9 and prints them one by one with a delay.

    Args:
        length (int): The number of random numbers to generate.
        speed (float): The delay time in seconds between printing each number.

    Returns:
        list: A list of randomly generated integers between 0 and 9.
    """
    global level_num
    level_num += 1

    generated_numbers = [random.randint(0, 9) for _ in range(length)]
    
    for n in generated_numbers:
        print(n)
        time.sleep(speed)

    return generated_numbers


def number_input():
    """
    Prompts the user to input a sequence of numbers and handles special commands like quitting.

    Returns:
        list or str: 
            - If the user enters a valid number string, returns a list of integers.
            - If the user enters 'q' or 'Q', returns the string 'q' (indicating the user wants to quit).

    Notes:
        - The function recursively calls itself if the user enters an invalid input (non-numeric).
    """
    print("Enter Numbers. Press 'q' to quit.")
    recited_nums = input()

    if recited_nums == "q" or recited_nums == "Q": #check if user wants to quit 
        return recited_nums
    try:
        recited_nums = [int(r) for r in recited_nums] #checks for letters or not numbers
    except ValueError:
        print("Only enter numbers with no spaces. EX: 452")
        return number_input()

    return recited_nums


def check_input(generated_nums, recited_nums):
    """
    Compares a list of generated numbers to the user-inputted numbers to check for a match.

    Args:
        generated_nums (list): The list of numbers generated by the game.
        recited_nums (list): The list of numbers entered by the user.

    Returns:
        bool: 
            - Returns True if both lists are of the same length and all elements match in the same order.
            - Returns False if the lengths differ or if any number in the sequence doesn't match.
    """
    if len(generated_nums) !=len(recited_nums):
        return False
    
    for i in range(len(generated_nums)):
        if generated_nums[i] != recited_nums[i]:
            return False
        
    return True  


def set_level_parameters_survival():
    """
    Sets the parameters for the number generation and speed in survival mode based on the player's current level.
    This function adjusts the speed and length of the generated number sequence as the player progresses through levels. 
    The player earns points as they advance, but the game ends if the player enters incorrect input.

    Global Variables:
        - score (int): Tracks the player's score.
        - level_num (int): Tracks the current level of the player.
        - gen_nums_speed (float): Speed at which the numbers are displayed, decreases as the player advances.
        - gen_nums_length (int): The length of the number sequence, increases every 7 levels.

    Returns:
        str: 
            - A message that the player quit the game, along with their score.
            - A message that the game is over if the player gives incorrect input.
            - If the input is correct, the function recursively calls itself to move to the next level.

    Behavior:
        - Every 5 levels: Increases the speed (decreases time between numbers) and adds 2 points to the score.
        - Every 7 levels: Increases the sequence length, slightly slows down the speed, and adds 3 points to the score.
        - The player earns 1 point for each correct level completion.
        - If the player enters "q" or "Q", the game quits and displays the player's score.
        - If the input is incorrect, the game ends with a "Game Over" message and the player's score.
    """

    global score
    global level_num
    global gen_nums_speed
    global gen_nums_length

    if level_num % 5 == 0 and level_num != 0: #after every 5 levels inc speed 
        gen_nums_speed = gen_nums_speed - 0.05
        score += 2 #give the play 2 points when speed increases

    if level_num % 7 == 0 and level_num != 0: #after every 7 levels inc. length
        gen_nums_length += 1
        gen_nums_speed += 0.02 #slow down the speed a little so it doesn't become impossible
        score += 3 #give player 3 points when length increases

    score += 1 #add a point 
    
    gen_num = generate_numbers(gen_nums_length, gen_nums_speed)
    recited_nums = number_input()

    if recited_nums == "q" or recited_nums == "Q": #checks if user quits the game
        return f"You quit the game!\nScore: {score} points"

    checked_input = check_input(gen_num, recited_nums)
    
    if checked_input:
        return set_level_parameters_survival() #move to next level if input is correct
    
    else: 
        return f"Game Over!\nScore: {score} points" #game ends if player enters wrong input in survival mode

